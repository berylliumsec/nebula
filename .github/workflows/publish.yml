name: Build, Test, and Release

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  release-build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Set up and activate the Conda environment.
      - name: Setup Conda Environment
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: 3.11
          activate-environment: nebula-2.0
          channels: conda-forge

      # Install Poetry and build the release distributions in one step.
      - name: Build release distributions using Poetry
        shell: bash -l {0}
        run: |
          # Source Conda's shell hook and re-activate the environment.
          eval "$(conda shell.bash hook)"
          conda activate nebula-2.0
          # Install Poetry from conda-forge.
          conda install -c conda-forge poetry -y
          # (Optional) Check that Poetry is installed.
          which poetry && poetry --version
          # Build the distributions.
          poetry build

      - name: Upload release distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-docker-publish:
    runs-on: ubuntu-latest
    environment: nebula
    needs: release-build
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Set up the same Conda environment.
      - name: Setup Conda Environment
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: 3.11
          activate-environment: nebula-2.0
          channels: conda-forge

      # (Optional) Install Poetry if needed later in this job.
      - name: Install Poetry via Conda
        run: conda install -c conda-forge poetry -y

      - name: Retrieve release distributions
        uses: actions/download-artifact@v3
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        if: github.event.pull_request.merged == true 
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Set version from pyproject.toml
        id: get_version
        run: |
          NEW_VERSION=$(grep '^version =' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV

      - name: Create GitHub Release  
        if: github.event.pull_request.merged == true
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_VERSION }}
          release_name: Release ${{ env.NEW_VERSION }}
          draft: false
          prerelease: false
          body: |
            Release Notes:
              - This version adds a GUI to Nebula
              - Upgrades the model to DeepSeek-R1-Distill-Llama-8B
              - Adds AI powered Notetaking and Suggestions
              - Direct command execution in a terminal interface
              - Add your cheat sheets for auto-suggestion
              - Take Screenshots
              - Basic Image editing

      - name: Upload Release Assets
        if: github.event.pull_request.merged == true
        run: |
          for asset in dist/*; do
            gh release upload ${{ env.NEW_VERSION }} $asset
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
